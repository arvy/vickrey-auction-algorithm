package com.jonusonis.auction;

import org.junit.Before;
import org.junit.Test;

import java.math.BigDecimal;

import static org.junit.Assert.*;

/*
 * This Java source file was auto generated by running 'gradle init --type java-library'
 * by 'Arvydas' at '11/16/15 9:17 PM' with Gradle 2.8
 *
 * @author Arvydas, @date 11/16/15 9:17 PM
 */
public class AuctionServiceTest {

    private AuctionService auctionService;

    private BigDecimal reservePrice;

    @Before
    public void setup(){
       reservePrice = new BigDecimal("100.00");
       auctionService  = new AuctionService(reservePrice);
    }

    @Test public void noBids() {
        assertNull(auctionService.close());
    }

    @Test public void oneBidReserveNotMet() {
        auctionService.bid("bob", new BigDecimal("50.00"));
        assertNull(auctionService.close());
    }

    @Test public void oneBidReserveMet() {
        auctionService.bid("bob", new BigDecimal("150.00"));
        Winner winner = auctionService.close();
        assertEquals("bob", winner.getName());
        assertEquals(reservePrice, winner.getPrice());
    }

    @Test public void oneBidderReserveMetFirstBidBelowReserve() {
        auctionService.bid("bob", new BigDecimal("80.00"));
        auctionService.bid("bob", new BigDecimal("150.00"));
        Winner winner = auctionService.close();
        assertEquals("bob", winner.getName());
        assertEquals(reservePrice, winner.getPrice());
    }

    @Test public void oneBidEqualingReserve() {
        auctionService.bid("bob", new BigDecimal("100.00"));
        Winner winner = auctionService.close();
        assertEquals("bob", winner.getName());
        assertEquals(reservePrice, winner.getPrice());
    }

    @Test public void twoBidsReserveMetFirstBidBelowReserve() {
        auctionService.bid("bob", new BigDecimal("80.00"));
        auctionService.bid("alice", new BigDecimal("150.00"));
        Winner winner = auctionService.close();
        assertEquals("alice", winner.getName());
        assertEquals(reservePrice, winner.getPrice());
    }

    @Test public void twoBiddersReserveMetWithFirstTwoBidsBelowReserve() {
        auctionService.bid("alice", new BigDecimal("50.00"));
        auctionService.bid("bob", new BigDecimal("60.00"));
        auctionService.bid("alice", new BigDecimal("101.00"));
        Winner winner = auctionService.close();
        assertEquals("alice", winner.getName());
        assertEquals(reservePrice, winner.getPrice());
    }

    @Test public void example(){
        auctionService.bid("A", new BigDecimal("110.00"));
        auctionService.bid("A", new BigDecimal("130.00"));
        auctionService.bid("C", new BigDecimal("125.00"));
        auctionService.bid("D", new BigDecimal("105.00"));
        auctionService.bid("D", new BigDecimal("115.00"));
        auctionService.bid("D", new BigDecimal("90.00"));
        auctionService.bid("E", new BigDecimal("132.00"));
        auctionService.bid("E", new BigDecimal("135.00"));
        auctionService.bid("E", new BigDecimal("140.00"));
        Winner winner = auctionService.close();
        assertEquals("E", winner.getName());
        assertEquals(new BigDecimal("130.00"), winner.getPrice());
    }

    @Test public void exampleInAscendingBidOrder(){
        auctionService.bid("D", new BigDecimal("90.00"));
        auctionService.bid("D", new BigDecimal("105.00"));
        auctionService.bid("A", new BigDecimal("110.00"));
        auctionService.bid("D", new BigDecimal("115.00"));
        auctionService.bid("C", new BigDecimal("125.00"));
        auctionService.bid("A", new BigDecimal("130.00"));
        auctionService.bid("E", new BigDecimal("132.00"));
        auctionService.bid("E", new BigDecimal("135.00"));
        auctionService.bid("E", new BigDecimal("140.00"));
        Winner winner = auctionService.close();
        assertEquals("E", winner.getName());
        assertEquals(new BigDecimal("130.00"), winner.getPrice());
    }

    @Test(expected = AuctionClosedException.class)
    public void biddingOnAClosedAuction(){
        auctionService.close();
        auctionService.bid("A", new BigDecimal("1.00"));
    }

    @Test(expected = AuctionClosedException.class)
    public void closingAnAlreadyClosedAuction(){
        auctionService.close();
        auctionService.close();
    }
}
